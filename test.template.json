{
  "Resources": {
    "testsg872EB48A": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "apiTestStack/test-sg",
        "VpcId": "vpc-11111111111111111"
      }
    },
    "testsgtoapiTestStacktestClickStreamALBApiClickStreamApiFunctionSG1F3A34C3ALLPORTS13101667": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "Description": "allow all traffic from application load balancer",
        "DestinationSecurityGroupId": {
          "Fn::GetAtt": [
            "testClickStreamALBApiClickStreamApiFunctionSGC830FA60",
            "GroupId"
          ]
        },
        "FromPort": 0,
        "GroupId": {
          "Fn::GetAtt": [
            "testsg872EB48A",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "ToPort": 65535
      }
    },
    "stackWorkflowS3BucketF67B9562": {
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "testClickStreamALBApiClickstreamDictionary0A1156B6": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "name",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiClickstreamMetadataA721B303": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createAt",
            "AttributeType": "N"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "prefix-time-index",
            "KeySchema": [
              {
                "AttributeName": "prefix",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "type",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiClickstreamAnalyticsMetadataA20F6663": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createAt",
            "AttributeType": "N"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "prefix-time-index",
            "KeySchema": [
              {
                "AttributeName": "prefix",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          },
          {
            "IndexName": "inverted-index",
            "KeySchema": [
              {
                "AttributeName": "type",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "id",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "type",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiClickstreamUser54DFA2EE": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleD2CDF2CF": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy2DB98D9D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickstreamDictionary0A1156B6",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy2DB98D9D",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleD2CDF2CF"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction504311BF": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "d1176a1dcb05789f8dacdd8b6b6db054b2e8ea05d7e67a185fa8db0853a0d247.zip"
        },
        "Description": "Lambda function for dictionary init of solution Click Stream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleD2CDF2CF",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30
      },
      "DependsOn": [
        "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy2DB98D9D",
        "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleD2CDF2CF"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole256DF90A": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy7EB8455A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction504311BF",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction504311BF",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy7EB8455A",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole256DF90A"
          }
        ]
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventFB731F8E": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "f2d30cfc360482320a52a4fcde8a70f3569df79ab30be24650fda58eb60052cf.zip"
        },
        "Description": "AWS CDK resource provider framework - onEvent (apiTestStack/testClickStreamALBApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction504311BF",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole256DF90A",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy7EB8455A",
        "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole256DF90A"
      ]
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventLogRetention9547C1FD": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventFB731F8E"
              }
            ]
          ]
        },
        "RetentionInDays": 5
      }
    },
    "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResource5AE5EDD9": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventFB731F8E",
            "Arn"
          ]
        },
        "tableName": {
          "Ref": "testClickStreamALBApiClickstreamDictionary0A1156B6"
        },
        "items": [
          {
            "name": "Solution",
            "data": {
              "name": "__SOLUTION_NAME__",
              "dist_output_bucket": "__DIST_OUTPUT_BUCKET__",
              "target": "__TARGET__",
              "prefix": "__PREFIX__",
              "version": "__SOLUTION_VERSION__"
            }
          },
          {
            "name": "Templates",
            "data": {
              "Ingestion_s3": "ingestion-server-s3-stack.template.json",
              "Ingestion_kafka": "ingestion-server-kafka-stack.template.json",
              "Ingestion_kinesis": "ingestion-server-kinesis-stack.template.json",
              "KafkaConnector": "kafka-s3-sink-stack.template.json",
              "DataProcessing": "data-pipeline-stack.template.json",
              "DataModelingRedshift": "data-analytics-redshift-stack.template.json",
              "Reporting": "data-reporting-quicksight-stack.template.json",
              "Metrics": "metrics-stack.template.json",
              "DataModelingAthena": "data-modeling-athena-stack.template.json"
            }
          },
          {
            "name": "BuiltInPlugins",
            "data": [
              {
                "id": "BUILT-IN-1",
                "type": "PLUGIN#BUILT-IN-1",
                "prefix": "PLUGIN",
                "name": "Transformer",
                "description": "Convert the data format reported by SDK into the data format in the data warehouse",
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.Transformer",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Transform",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              },
              {
                "id": "BUILT-IN-2",
                "type": "PLUGIN#BUILT-IN-2",
                "prefix": "PLUGIN",
                "name": "UAEnrichment",
                "description": "Derive OS, device, browser information from User Agent string from the HTTP request header",
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.UAEnrichment",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Enrich",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              },
              {
                "id": "BUILT-IN-3",
                "type": "PLUGIN#BUILT-IN-3",
                "prefix": "PLUGIN",
                "name": "IPEnrichment",
                "description": "Derive location information (e.g., city, country, region) based on the request source IP",
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.IPEnrichment",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Enrich",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              }
            ]
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRole88A78356": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRoleDefaultPolicy868EE016": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRoleDefaultPolicy868EE016",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRole88A78356"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "074d80b90a5b97dc39e1c2ec659c76d9bbe1345051e81b481cfb4ebdac1cc82e.zip"
        },
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "MemorySize": 128,
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRole88A78356",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 300
      },
      "DependsOn": [
        "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRoleDefaultPolicy868EE016",
        "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRole88A78356"
      ]
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFnLogRetentionE547618F": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F"
              }
            ]
          ]
        },
        "RetentionInDays": 7
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFnlistTagsPolicyF39C6020": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:ListTags",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFnlistTagsPolicyF39C6020",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserRole88A78356"
          }
        ]
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRole790456E1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy308B7455": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "estClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy308B7455",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRole790456E1"
          }
        ]
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventD5E33F27": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "f2d30cfc360482320a52a4fcde8a70f3569df79ab30be24650fda58eb60052cf.zip"
        },
        "Description": "AWS CDK resource provider framework - onEvent (apiTestStack/testClickStreamALBApi/AddAdminUserCustomResource/AddAdminUserCustomResourceProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserFn2E94BF2F",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRole790456E1",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy308B7455",
        "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventServiceRole790456E1"
      ]
    },
    "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventLogRetentionE1EE6075": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventD5E33F27"
              }
            ]
          ]
        },
        "RetentionInDays": 5
      }
    },
    "testClickStreamALBApiAddAdminUserCustomResource536E6C9F": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "testClickStreamALBApiAddAdminUserCustomResourceAddAdminUserCustomResourceProviderframeworkonEventD5E33F27",
            "Arn"
          ]
        },
        "Email": "fake@example.com",
        "UserTableName": {
          "Ref": "testClickStreamALBApiClickstreamUser54DFA2EE"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiClickStreamApiFunctionSGC830FA60": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "apiTestStack/testClickStreamALBApi/ClickStreamApiFunctionSG",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1"
          }
        ],
        "VpcId": "vpc-11111111111111111"
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W29",
              "reason": "Disallow all egress traffic"
            },
            {
              "id": "W27",
              "reason": "Allow all traffic from application load balancer"
            },
            {
              "id": "W40",
              "reason": "Design intent: Security Groups egress with an IpProtocol of -1"
            },
            {
              "id": "W5",
              "reason": "Design intent: Security Groups found with cidr open to world on egress"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiClickStreamApiFunctionSGfromapiTestStacktestsg4FAC454FALLPORTSFCC6B698": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "Description": "allow all traffic from application load balancer",
        "FromPort": 0,
        "GroupId": {
          "Fn::GetAtt": [
            "testClickStreamALBApiClickStreamApiFunctionSGC830FA60",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "testsg872EB48A",
            "GroupId"
          ]
        },
        "ToPort": 65535
      }
    },
    "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiStackActionStateMachineActionFunctionRoleDefaultPolicy22F19739": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackActionStateMachineActionFunctionRoleDefaultPolicy22F19739",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335"
          }
        ]
      }
    },
    "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "22e53dba87c23c8877fc1c188de698dbed489d30fb8247b59f3c35f31137e824.zip"
        },
        "Description": "Lambda function for state machine action of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": "Active"
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "testClickStreamALBApiClickStreamApiFunctionSGC830FA60",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            "subnet-33333333333333333",
            "subnet-44444444444444444"
          ]
        }
      },
      "DependsOn": [
        "actionfunceniA16F9174",
        "testClickStreamALBApiStackActionStateMachineActionFunctionRoleDefaultPolicy22F19739",
        "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackActionStateMachineActionFunctionRolePolicyEC43145C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:UpdateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateTerminationProtection"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/Clickstream-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "iam:GetRole",
                "iam:PassRole",
                "iam:DetachRolePolicy",
                "iam:GetPolicy",
                "iam:DeleteRolePolicy",
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:AttachRolePolicy",
                "iam:PutRolePolicy",
                "iam:ListRolePolicies",
                "iam:GetRolePolicy",
                "iam:CreateInstanceProfile",
                "iam:DeleteInstanceProfile",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:AddRoleToInstanceProfile",
                "iam:ListPolicies",
                "iam:ListRoles",
                "iam:UpdateRoleDescription"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/Clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/Clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":instance-profile/Clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "sns:*",
                "sqs:*",
                "redshift-serverless:*",
                "s3:*",
                "apigateway:*",
                "logs:*",
                "redshift:*",
                "dynamodb:*",
                "autoscaling:*",
                "application-autoscaling:*",
                "glue:*",
                "cloudwatch:*",
                "emr-serverless:*",
                "ssm:*",
                "ecs:*",
                "lambda:*",
                "quicksight:*",
                "ec2:*",
                "events:*",
                "elasticloadbalancing:*",
                "kinesis:*",
                "kafka:*",
                "states:*",
                "secretsmanager:*",
                "globalaccelerator:*",
                "kms:*",
                "athena:*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackActionStateMachineActionFunctionRolePolicyEC43145C",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This policy requires releted actions in order to start/delete/update cloudformation stacks with many other services"
            },
            {
              "id": "F39",
              "reason": "When start/delete/update cloudformation stacks, we have to PassRole to existing undeterministical roles."
            },
            {
              "id": "W76",
              "reason": "This policy needs to be able to execute stacks, and call other AWS service"
            },
            {
              "id": "W12",
              "reason": "This policy needs to be able to start/delete other cloudformation stacks of the plugin with unknown resources names"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackActionStateMachineLogGroupDE72356F": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/Clickstream/StackActionLogGroup-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackActionStateMachineRoleE114EFCD": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "states"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiStackActionStateMachineRoleDefaultPolicy2F163742": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackActionStateMachineRoleDefaultPolicy2F163742",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackActionStateMachineRoleE114EFCD"
          }
        ]
      }
    },
    "testClickStreamALBApiStackActionStateMachineD1557E17": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"Execute Task\",\"States\":{\"Execute Task\":{\"Next\":\"End?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"End?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Action\",\"StringEquals\":\"End\",\"Next\":\"EndState\"}],\"Default\":\"Wait 15 Seconds\"},\"Wait 15 Seconds\":{\"Type\":\"Wait\",\"Seconds\":15,\"Next\":\"Describe Stack\"},\"Stack in progress?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Result.StackStatus\",\"StringMatches\":\"*_IN_PROGRESS\",\"Next\":\"Wait 15 Seconds\"}],\"Default\":\"Callback Task\"},\"Describe Stack\":{\"Next\":\"Stack in progress?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Callback Task\":{\"Next\":\"EndState\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"EndState\":{\"Type\":\"Pass\",\"End\":true}},\"TimeoutSeconds\":7200}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiStackActionStateMachineLogGroupDE72356F",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "testClickStreamALBApiStackActionStateMachineRoleE114EFCD",
            "Arn"
          ]
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      },
      "DependsOn": [
        "testClickStreamALBApiStackActionStateMachineRoleDefaultPolicy2F163742",
        "testClickStreamALBApiStackActionStateMachineRoleE114EFCD"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicy8BFD716F": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "stackWorkflowS3BucketF67B9562",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "stackWorkflowS3BucketF67B9562",
                          "Arn"
                        ]
                      },
                      "/clickstream/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicy8BFD716F",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by WorkflowFunInStateAction, * xray resources for read only access or IAM limition."
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineWorkflowCFNPolicy917DC336": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudformation:DescribeStacks",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/Clickstream-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackWorkflowStateMachineWorkflowCFNPolicy917DC336",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1"
          }
        ]
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionE7DBCFDE": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "2a9a40325471fa7217abf146448d38b8a374eff073aaee4e3160c835d1aef394.zip"
        },
        "Description": "Lambda function for state machine workflow of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": "Active"
        },
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "testClickStreamALBApiClickStreamApiFunctionSGC830FA60",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            "subnet-33333333333333333",
            "subnet-44444444444444444"
          ]
        }
      },
      "DependsOn": [
        "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicy8BFD716F",
        "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1",
        "workflowfunceniF26BB9B3"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by WorkflowFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by WorkflowFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineLogGroupD7FD1922": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/Clickstream/StackWorkflowLogGroup-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineRole7E1D20E5": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "states"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineRoleDefaultPolicyDFDB6DE4": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionE7DBCFDE",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionE7DBCFDE",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "testClickStreamALBApiStackActionStateMachineD1557E17"
              }
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":execution:",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "testClickStreamALBApiStackActionStateMachineD1557E17"
                            }
                          ]
                        }
                      ]
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                  ]
                ]
              }
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:clickstream-stack-workflow-",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                2,
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":execution:clickstream-stack-workflow-",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                2,
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiStackWorkflowStateMachineRoleDefaultPolicyDFDB6DE4",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackWorkflowStateMachineRole7E1D20E5"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by StackWorkflowStateMachine, * xray/logs resources for read only access or IAM limition."
            },
            {
              "id": "W76",
              "reason": "The state machine default policy document create by many CallAwsService."
            }
          ]
        }
      }
    },
    "testClickStreamALBApiStackWorkflowStateMachineAE34E0DF": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"InputTask\",\"States\":{\"InputTask\":{\"Next\":\"TypeChoice\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionE7DBCFDE",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"TypeChoice\":{\"Type\":\"Choice\",\"OutputPath\":\"$.Data\",\"Choices\":[{\"Variable\":\"$.Type\",\"StringEquals\":\"Stack\",\"Next\":\"StackExecution\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Serial\",\"Next\":\"SerialMap\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Parallel\",\"Next\":\"ParallelMap\"}],\"Default\":\"Pass\"},\"Pass\":{\"Type\":\"Pass\",\"End\":true},\"StackExecution\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Action.$\":\"$.Input.Action\",\"Token.$\":\"$$.Task.Token\",\"Input.$\":\"$.Input\",\"Callback.$\":\"$.Callback\"},\"StateMachineArn\":\"",
              {
                "Ref": "testClickStreamALBApiStackActionStateMachineD1557E17"
              },
              "\"}},\"SerialMap\":{\"Type\":\"Map\",\"End\":true,\"Iterator\":{\"StartAt\":\"SerialCallSelf\",\"States\":{\"SerialCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":stateMachine:clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "\"}}}},\"ItemsPath\":\"$\",\"MaxConcurrency\":1},\"ParallelMap\":{\"Type\":\"Map\",\"End\":true,\"Iterator\":{\"StartAt\":\"ParallelCallSelf\",\"States\":{\"ParallelCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":stateMachine:clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "\"}}}},\"ItemsPath\":\"$\",\"MaxConcurrency\":40}},\"TimeoutSeconds\":259200}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiStackWorkflowStateMachineLogGroupD7FD1922",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "testClickStreamALBApiStackWorkflowStateMachineRole7E1D20E5",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              "clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      },
      "DependsOn": [
        "testClickStreamALBApiStackWorkflowStateMachineRoleDefaultPolicyDFDB6DE4",
        "testClickStreamALBApiStackWorkflowStateMachineRole7E1D20E5"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "testClickStreamALBApiQuickSightEmbedRole6CE59BC9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "quicksight:GenerateEmbedUrlForRegisteredUser",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":quicksight:*:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":dashboard/Clickstream*"
                      ]
                    ]
                  }
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "quickSightEmbedPolicy"
          }
        ]
      }
    },
    "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiClickStreamApiFunctionRoleDefaultPolicyD977CF6D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickstreamDictionary0A1156B6",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickstreamMetadataA721B303",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiClickstreamMetadataA721B303",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickstreamAnalyticsMetadataA20F6663",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "testClickStreamALBApiClickstreamAnalyticsMetadataA20F6663",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickstreamUser54DFA2EE",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiClickStreamApiFunctionRoleDefaultPolicyD977CF6D",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
          }
        ]
      }
    },
    "testClickStreamALBApiClickStreamApiStepFunctionPolicy71DA1626": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "testClickStreamALBApiStackActionStateMachineD1557E17"
                },
                {
                  "Ref": "testClickStreamALBApiStackWorkflowStateMachineAE34E0DF"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiClickStreamApiStepFunctionPolicy71DA1626",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
          }
        ]
      }
    },
    "testClickStreamALBApiClickStreamApiAWSSdkPolicy48F56187": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeRegions",
                "ec2:DescribeVpcs",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeRouteTables",
                "ec2:DescribeVpcEndpoints",
                "ec2:DescribeSecurityGroupRules",
                "ec2:DescribeAvailabilityZones",
                "kafka:ListClustersV2",
                "kafka:ListClusters",
                "kafka:ListNodes",
                "s3:ListAllMyBuckets",
                "redshift:DescribeClusters",
                "redshift:DescribeClusterSubnetGroups",
                "redshift-serverless:ListWorkgroups",
                "redshift-serverless:GetWorkgroup",
                "redshift-serverless:GetNamespace",
                "s3:ListBucket",
                "quicksight:ListUsers",
                "quicksight:DescribeAccountSubscription",
                "quicksight:RegisterUser",
                "quicksight:GenerateEmbedUrlForRegisteredUser",
                "quicksight:UpdateDashboardPermissions",
                "quicksight:CreateDataSet",
                "quicksight:PassDataSet",
                "quicksight:PassDataSource",
                "quicksight:CreateDashboard",
                "quicksight:DeleteDashboard",
                "quicksight:UpdateDashboard",
                "quicksight:DescribeDashboard",
                "quicksight:UpdateDashboardPublishedVersion",
                "quicksight:CreateAnalysis",
                "ds:AuthorizeApplication",
                "ds:UnauthorizeApplication",
                "ds:CheckAlias",
                "ds:CreateAlias",
                "ds:DescribeDirectories",
                "ds:DescribeTrusts",
                "ds:DeleteDirectory",
                "ds:CreateIdentityPoolDirectory",
                "s3:GetBucketLocation",
                "s3:GetBucketPolicy",
                "route53:ListHostedZones",
                "athena:ListWorkGroups",
                "iam:ListRoles",
                "iam:ListServerCertificates",
                "iam:GetContextKeysForCustomPolicy",
                "iam:SimulateCustomPolicy",
                "states:DescribeExecution",
                "acm:ListCertificates",
                "cloudformation:DescribeStacks",
                "secretsmanager:ListSecrets",
                "secretsmanager:GetSecretValue",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:EnableAlarmActions",
                "cloudwatch:DisableAlarmActions",
                "emr-serverless:ListApplications"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":iam::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":role/Clickstream-DataModeling*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiClickStreamApiAWSSdkPolicy48F56187",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda need to be queried all resources under the current account by design"
            },
            {
              "id": "W76",
              "reason": "This policy needs to be able to call other AWS service by design"
            }
          ]
        }
      }
    },
    "testClickStreamALBApiUploadRoleD732B7C0": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "testClickStreamALBApiUploadRoleDefaultPolicyEBF1E156": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "stackWorkflowS3BucketF67B9562",
                        "Arn"
                      ]
                    },
                    "/plugins/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "testClickStreamALBApiUploadRoleDefaultPolicyEBF1E156",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiUploadRoleD732B7C0"
          }
        ]
      }
    },
    "testClickStreamALBApiLambdaAdapterLayerX86A6711566": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs16.x",
          "nodejs18.x"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "63c2a18a3a9bf5ec8fcbe24e88f42413fcf25fa2b45056a427444d902ce9975a.zip"
        }
      }
    },
    "testClickStreamALBApiApiFunction9890103B": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "07d8f71d7def48b0080a105d06e6d1e8ef24928f8ba541bfa57745d6ab76c376.zip"
        },
        "Description": "Lambda function for api of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "AWS_LAMBDA_EXEC_WRAPPER": "/opt/bootstrap",
            "CLICK_STREAM_TABLE_NAME": {
              "Ref": "testClickStreamALBApiClickstreamMetadataA721B303"
            },
            "DICTIONARY_TABLE_NAME": {
              "Ref": "testClickStreamALBApiClickstreamDictionary0A1156B6"
            },
            "USER_TABLE_NAME": {
              "Ref": "testClickStreamALBApiClickstreamUser54DFA2EE"
            },
            "ANALYTICS_METADATA_TABLE_NAME": {
              "Ref": "testClickStreamALBApiClickstreamAnalyticsMetadataA20F6663"
            },
            "STACK_ACTION_SATE_MACHINE": {
              "Ref": "testClickStreamALBApiStackActionStateMachineD1557E17"
            },
            "STACK_WORKFLOW_SATE_MACHINE": {
              "Ref": "testClickStreamALBApiStackWorkflowStateMachineAE34E0DF"
            },
            "STACK_WORKFLOW_S3_BUCKET": {
              "Ref": "stackWorkflowS3BucketF67B9562"
            },
            "PREFIX_TIME_GSI_NAME": "prefix-time-index",
            "INVERTED_GSI_NAME": "inverted-index",
            "AWS_ACCOUNT_ID": {
              "Ref": "AWS::AccountId"
            },
            "AWS_URL_SUFFIX": {
              "Ref": "AWS::URLSuffix"
            },
            "WITH_AUTH_MIDDLEWARE": "true",
            "ISSUER": "",
            "AUTHORIZER_TABLE_NAME": "",
            "STS_UPLOAD_ROLE_ARN": {
              "Fn::GetAtt": [
                "testClickStreamALBApiUploadRoleD732B7C0",
                "Arn"
              ]
            },
            "API_ROLE_NAME": {
              "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
            },
            "QUICKSIGHT_EMBED_ROLE_ARN": {
              "Fn::GetAtt": [
                "testClickStreamALBApiQuickSightEmbedRole6CE59BC9",
                "Arn"
              ]
            },
            "HEALTH_CHECK_PATH": "/",
            "QUICKSIGHT_CONTROL_PLANE_REGION": "us-east-1",
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN"
          }
        },
        "Handler": "run.sh",
        "Layers": [
          {
            "Ref": "testClickStreamALBApiLambdaAdapterLayerX86A6711566"
          }
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "testClickStreamALBApiClickStreamApiFunctionSGC830FA60",
                "GroupId"
              ]
            }
          ],
          "SubnetIds": [
            "subnet-33333333333333333",
            "subnet-44444444444444444"
          ]
        }
      },
      "DependsOn": [
        "apifunceni59253B5A",
        "testClickStreamALBApiClickStreamApiFunctionRoleDefaultPolicyD977CF6D",
        "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W92",
              "reason": "Lambda function is only used by ClickStreamApiFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "customresourcefunclogs9B71FED3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction504311BF"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "customresourcefunclogs9B71FED3",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleD2CDF2CF"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
          }
        ]
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "5cc92ed0cea39e2b8de2dbc527dfb5980a3af9564bd1084d840b9787c7d0467e.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
      ]
    },
    "actionfunclogs394D90DA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "testClickStreamALBApiStackActionStateMachineActionFunction9CC75763"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "actionfunclogs394D90DA",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "actionfunceniA16F9174": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "actionfunceniA16F9174",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackActionStateMachineActionFunctionRoleB3901335"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    },
    "workflowfunclogs7A318BBF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionE7DBCFDE"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "workflowfunclogs7A318BBF",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "workflowfunceniF26BB9B3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "workflowfunceniF26BB9B3",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiStackWorkflowStateMachineWorkflowFunctionRole15F382D1"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    },
    "apifunclogs9F7B9244": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "testClickStreamALBApiApiFunction9890103B"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "apifunclogs9F7B9244",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "apifunceni59253B5A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "apifunceni59253B5A",
        "Roles": [
          {
            "Ref": "testClickStreamALBApiClickStreamApiFunctionRoleAE8AB92D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    }
  },
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com"
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com"
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com"
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com"
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com"
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com"
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com"
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com"
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com"
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com"
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com"
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com"
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com"
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com"
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com"
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com"
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com"
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com"
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com"
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com"
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com"
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com"
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com"
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com"
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com"
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com"
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com"
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com"
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com"
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com"
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com"
      }
    }
  },
  "Parameters": {
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}