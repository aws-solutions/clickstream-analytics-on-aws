{
  "Description": "(SO0219) Clickstream Analytics on AWS (Version v1.0.0)- Control Plane",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Authentication Information"
          },
          "Parameters": [
            "Email"
          ]
        }
      ],
      "ParameterLabels": {
        "Email": {
          "default": "Admin User Email"
        }
      }
    },
    "cdk_nag": {
      "rules_to_suppress": [
        {
          "reason": "LogRetention lambda role which are created by CDK uses AWSLambdaBasicExecutionRole",
          "id": "AwsSolutions-IAM4"
        },
        {
          "reason": "The lambda is created by CDK, CustomResource framework-onEvent, the runtime version will be upgraded by CDK",
          "id": "AwsSolutions-L1"
        }
      ]
    }
  },
  "Resources": {
    "ClickstreamSolutionDataBucket200465FE": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedHeaders": [
                "*"
              ],
              "AllowedMethods": [
                "PUT",
                "POST",
                "GET"
              ],
              "AllowedOrigins": [
                "*"
              ],
              "ExposedHeaders": [
                "x-amz-server-side-encryption",
                "x-amz-request-id",
                "x-amz-id-2",
                "ETag"
              ],
              "MaxAge": 3000
            }
          ]
        },
        "LoggingConfiguration": {
          "LogFilePrefix": "data-bucket-access-logs"
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "ClickstreamSolutionDataBucketPolicy05271F62": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ClickstreamSolutionDataBucket200465FE"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickstreamSolutionDataBucket200465FE",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickstreamSolutionDataBucket200465FE",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "FrontRewriteFunction560E1714": {
      "Type": "AWS::CloudFront::Function",
      "Properties": {
        "AutoPublish": true,
        "FunctionCode": "function handler(event) {\n  var request = event.request;\n  var uri = request.uri;\n  if (uri.startsWith('/signin') || \n    uri.startsWith('/projects') || \n    uri.startsWith('/project') || \n    uri.startsWith('/pipelines') || \n    uri.startsWith('/plugins') || \n    uri.startsWith('/alarms') || \n    uri.startsWith('/user') || \n    uri.startsWith('/analytics') || \n    uri.startsWith('/quicksight')) {\n      request.uri = '/index.html'; \n  }\n  return request; \n}",
        "FunctionConfig": {
          "Comment": {
            "Fn::Join": [
              "",
              [
                "FrontRewriteFunction-",
                {
                  "Ref": "AWS::Region"
                },
                "-",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "Runtime": "cloudfront-js-1.0"
        },
        "Name": {
          "Fn::Join": [
            "",
            [
              "FrontRewriteFunction-",
              {
                "Ref": "AWS::Region"
              },
              "-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        }
      }
    },
    "responseheaderspolicy35100ADE": {
      "Type": "AWS::CloudFront::ResponseHeadersPolicy",
      "Properties": {
        "ResponseHeadersPolicyConfig": {
          "Name": {
            "Fn::Join": [
              "",
              [
                "clickstream-response_header-policy-",
                {
                  "Ref": "AWS::Region"
                },
                "-",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "SecurityHeadersConfig": {
            "ContentSecurityPolicy": {
              "ContentSecurityPolicy": {
                "Fn::Join": [
                  "",
                  [
                    "default-src 'self' data:; upgrade-insecure-requests; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self'; connect-src 'self' https://cognito-idp.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".amazonaws.com *.auth.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".amazoncognito.com ",
                    {
                      "Fn::GetAtt": [
                        "ClickstreamSolutionDataBucket200465FE",
                        "DomainName"
                      ]
                    },
                    " ",
                    {
                      "Fn::GetAtt": [
                        "ClickstreamSolutionDataBucket200465FE",
                        "RegionalDomainName"
                      ]
                    },
                    "; frame-src *.quicksight.",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ".amazon.com;"
                  ]
                ]
              },
              "Override": true
            },
            "ContentTypeOptions": {
              "Override": true
            },
            "FrameOptions": {
              "FrameOption": "DENY",
              "Override": true
            },
            "ReferrerPolicy": {
              "Override": true,
              "ReferrerPolicy": "no-referrer"
            },
            "StrictTransportSecurity": {
              "AccessControlMaxAgeSec": 600,
              "IncludeSubdomains": true,
              "Override": true
            },
            "XSSProtection": {
              "ModeBlock": true,
              "Override": true,
              "Protection": true
            }
          }
        }
      }
    },
    "cloudfrontcontrolplaneportalbucket1534502E": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "LogDeliveryWrite",
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "DestinationBucketName": {
            "Ref": "ClickstreamSolutionDataBucket200465FE"
          },
          "LogFilePrefix": "portal-bucket-access-log/"
        },
        "OwnershipControls": {
          "Rules": [
            {
              "ObjectOwnership": "ObjectWriter"
            }
          ]
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          },
          {
            "Key": "aws-cdk:cr-owned:92a07afd",
            "Value": "true"
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "cloudfrontcontrolplaneportalbucketPolicy525DAD23": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplaneportalbucket1534502E",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cloudfrontcontrolplaneportalbucket1534502E",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:PutBucketPolicy",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplaneportalbucket1534502E",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cloudfrontcontrolplaneportalbucket1534502E",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Principal": {
                "CanonicalUser": {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplanePortalDistributionOrigin1S3Origin79E734AC",
                    "S3CanonicalUserId"
                  ]
                }
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "cloudfrontcontrolplaneportalbucket1534502E",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Action": "s3:GetObject",
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":cloudfront::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":distribution/",
                        {
                          "Ref": "cloudfrontcontrolplanePortalDistributionCAE911E8"
                        }
                      ]
                    ]
                  }
                }
              },
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com"
              },
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "cloudfrontcontrolplaneportalbucket1534502E",
                        "Arn"
                      ]
                    },
                    "/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "cloudfrontcontrolplaneportalbucketAutoDeleteObjectsCustomResource43E2DB9D": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
        }
      },
      "DependsOn": [
        "cloudfrontcontrolplaneportalbucketPolicy525DAD23"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "cloudfrontcontrolplaneoriginaccesscontrol66E2793E": {
      "Type": "AWS::CloudFront::OriginAccessControl",
      "Properties": {
        "OriginAccessControlConfig": {
          "Name": {
            "Fn::Join": [
              "",
              [
                "clickstream-controlplane-oac-",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4"
        }
      }
    },
    "cloudfrontcontrolplanedefaultCachePolicy7107D442": {
      "Type": "AWS::CloudFront::CachePolicy",
      "Properties": {
        "CachePolicyConfig": {
          "DefaultTTL": 604800,
          "MaxTTL": 2592000,
          "MinTTL": 0,
          "Name": {
            "Fn::Join": [
              "",
              [
                "cachepolicy-",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "ParametersInCacheKeyAndForwardedToOrigin": {
            "CookiesConfig": {
              "CookieBehavior": "none"
            },
            "EnableAcceptEncodingBrotli": false,
            "EnableAcceptEncodingGzip": false,
            "HeadersConfig": {
              "HeaderBehavior": "none"
            },
            "QueryStringsConfig": {
              "QueryStringBehavior": "none"
            }
          }
        }
      }
    },
    "cloudfrontcontrolplanePortalDistributionOrigin1S3Origin79E734AC": {
      "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
      "Properties": {
        "CloudFrontOriginAccessIdentityConfig": {
          "Comment": "Identity for CloudFrontS3PortalStackcloudfrontcontrolplanePortalDistributionOrigin108C38988"
        }
      }
    },
    "cloudfrontcontrolplanePortalDistributionCAE911E8": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Aliases": [],
          "CacheBehaviors": [
            {
              "AllowedMethods": [
                "GET",
                "HEAD",
                "OPTIONS",
                "PUT",
                "PATCH",
                "POST",
                "DELETE"
              ],
              "CachePolicyId": "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
              "Compress": true,
              "OriginRequestPolicyId": {
                "Ref": "ApiGatewayOriginRequestPolicy339DF282"
              },
              "PathPattern": {
                "Fn::Join": [
                  "",
                  [
                    "/",
                    {
                      "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
                    },
                    "/*"
                  ]
                ]
              },
              "TargetOriginId": "CloudFrontS3PortalStackcloudfrontcontrolplanePortalDistributionOrigin2F9313891",
              "ViewerProtocolPolicy": "redirect-to-https"
            }
          ],
          "Comment": "CloudFront distribution for (SO0219) Clickstream Analytics on AWS (Version v1.0.0)- Control Plane",
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "GET",
              "HEAD"
            ],
            "CachePolicyId": {
              "Ref": "cloudfrontcontrolplanedefaultCachePolicy7107D442"
            },
            "CachedMethods": [
              "GET",
              "HEAD"
            ],
            "Compress": true,
            "FunctionAssociations": [
              {
                "EventType": "viewer-request",
                "FunctionARN": {
                  "Fn::GetAtt": [
                    "FrontRewriteFunction560E1714",
                    "FunctionARN"
                  ]
                }
              }
            ],
            "ResponseHeadersPolicyId": {
              "Ref": "responseheaderspolicy35100ADE"
            },
            "TargetOriginId": "CloudFrontS3PortalStackcloudfrontcontrolplanePortalDistributionOrigin108C38988",
            "ViewerProtocolPolicy": "redirect-to-https"
          },
          "DefaultRootObject": "index.html",
          "Enabled": true,
          "HttpVersion": "http2and3",
          "IPV6Enabled": false,
          "Logging": {
            "Fn::If": [
              "cloudfrontcontrolplanenotOpsInRegionFA8E79C7",
              {
                "Bucket": {
                  "Fn::GetAtt": [
                    "ClickstreamSolutionDataBucket200465FE",
                    "RegionalDomainName"
                  ]
                },
                "Prefix": "cloudfront-access-log"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          },
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "cloudfrontcontrolplaneportalbucket1534502E",
                  "RegionalDomainName"
                ]
              },
              "Id": "CloudFrontS3PortalStackcloudfrontcontrolplanePortalDistributionOrigin108C38988",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "cloudfrontcontrolplaneoriginaccesscontrol66E2793E",
                  "Id"
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            },
            {
              "CustomOriginConfig": {
                "OriginProtocolPolicy": "https-only",
                "OriginSSLProtocols": [
                  "TLSv1.2"
                ]
              },
              "DomainName": {
                "Fn::Select": [
                  2,
                  {
                    "Fn::Split": [
                      "/",
                      {
                        "Fn::Join": [
                          "",
                          [
                            "https://",
                            {
                              "Ref": "ClickStreamApi748490D9"
                            },
                            ".execute-api.",
                            {
                              "Ref": "AWS::Region"
                            },
                            ".",
                            {
                              "Ref": "AWS::URLSuffix"
                            },
                            "/",
                            {
                              "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
                            },
                            "/"
                          ]
                        ]
                      }
                    ]
                  }
                ]
              },
              "Id": "CloudFrontS3PortalStackcloudfrontcontrolplanePortalDistributionOrigin2F9313891",
              "OriginPath": {
                "Fn::Join": [
                  "",
                  [
                    "/",
                    {
                      "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
                    }
                  ]
                ]
              }
            }
          ],
          "PriceClass": "PriceClass_200"
        }
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W70",
              "reason": "suppress minium TLSv1.2 warning when using default certificate/domain name of cloudfront"
            }
          ]
        }
      }
    },
    "cloudfrontcontrolplaneportaldeployAwsCliLayerE6343FE0": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "3fb6287214999ddeafa7cd0e3e58bc5144c8678bb720f3b5e45e8fd32f333eb3.zip"
        },
        "Description": "/opt/awscli/aws"
      }
    },
    "cloudfrontcontrolplaneportaldeployCustomResource3FBC8A44": {
      "Type": "Custom::CDKBucketDeployment",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536",
            "Arn"
          ]
        },
        "SourceBucketNames": [
          {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          }
        ],
        "SourceObjectKeys": [
          "3893711fb428396672d962977dca23c816889a154c0ebafa76c514e443a5a295.zip",
          "c6a7d6d7477c292d4519dc9d62b6a4552448a9e86e349a890c58d90842e8ad0a.zip"
        ],
        "SourceMarkers": [
          {},
          {
            "<<marker:0xbaba:0>>": {
              "Ref": "AWS::Region"
            },
            "<<marker:0xbaba:1>>": {
              "Ref": "userPoolDC9497E0"
            },
            "<<marker:0xbaba:2>>": {
              "Ref": "clickstreambackendclient721D6562"
            },
            "<<marker:0xbaba:3>>": {
              "Fn::GetAtt": [
                "cloudfrontcontrolplanePortalDistributionCAE911E8",
                "DomainName"
              ]
            },
            "<<marker:0xbaba:4>>": {
              "Ref": "ClickstreamSolutionDataBucket200465FE"
            },
            "<<marker:0xbaba:5>>": {
              "Ref": "AWS::Region"
            },
            "<<marker:0xbaba:6>>": {
              "Ref": "userPoolcognitodomain5F5914A6"
            },
            "<<marker:0xbaba:7>>": {
              "Ref": "AWS::Region"
            }
          }
        ],
        "DestinationBucketName": {
          "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
        },
        "Prune": false,
        "DistributionId": {
          "Ref": "cloudfrontcontrolplanePortalDistributionCAE911E8"
        },
        "DistributionPaths": [
          "/index.html",
          "/asset-manifest.json",
          "/robots.txt",
          "/aws-exports.json",
          "/locales/*"
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ]
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6.zip"
        },
        "Timeout": 900,
        "MemorySize": 128,
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "cloudfrontcontrolplaneportalbucket1534502E"
              },
              " S3 bucket."
            ]
          ]
        }
      },
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by S3AutoDeleteObjects for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by S3AutoDeleteObjects for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplaneportalbucket1534502E",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "cloudfrontcontrolplaneportalbucket1534502E",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "cloudfront:GetInvalidation",
                "cloudfront:CreateInvalidation"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "Roles": [
          {
            "Ref": "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by CDK built-in BucketDeployment, * cloudFront resources for read only access or IAM limitation."
            }
          ]
        }
      }
    },
    "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756C81C01536": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "0b1f5aa55d045066ed91316b823a808060c12737e0575ab7cefe2335324108b0.zip"
        },
        "Environment": {
          "Variables": {
            "AWS_CA_BUNDLE": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
          }
        },
        "Handler": "index.handler",
        "Layers": [
          {
            "Ref": "cloudfrontcontrolplaneportaldeployAwsCliLayerE6343FE0"
          }
        ],
        "Role": {
          "Fn::GetAtt": [
            "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265",
            "Arn"
          ]
        },
        "Runtime": "python3.9",
        "Timeout": 900
      },
      "DependsOn": [
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRoleDefaultPolicy88902FDF",
        "CustomCDKBucketDeployment8693BB64968944B69AAFB0CC9EB8756CServiceRole89A01265"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by CDK built-in BucketDeployment for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by CDK built-in BucketDeployment for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "userPoolDC9497E0": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_phone_number",
              "Priority": 1
            },
            {
              "Name": "verified_email",
              "Priority": 2
            }
          ]
        },
        "AdminCreateUserConfig": {
          "AllowAdminCreateUserOnly": true,
          "InviteMessageTemplate": {
            "EmailMessage": "Hello {username}, your temporary password for ClickStream Analytics on AWS Solution is {####}",
            "EmailSubject": "Welcome to use Clickstream Analytics on AWS solution"
          }
        },
        "AutoVerifiedAttributes": [
          "email"
        ],
        "EmailVerificationMessage": "The verification code to your new account is {####}",
        "EmailVerificationSubject": "Verify your new account",
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true
          }
        },
        "SmsVerificationMessage": "The verification code to your new account is {####}",
        "UserPoolAddOns": {
          "AdvancedSecurityMode": "ENFORCED"
        },
        "UsernameAttributes": [
          "email"
        ],
        "UsernameConfiguration": {
          "CaseSensitive": false
        },
        "VerificationMessageTemplate": {
          "DefaultEmailOption": "CONFIRM_WITH_CODE",
          "EmailMessage": "The verification code to your new account is {####}",
          "EmailSubject": "Verify your new account",
          "SmsMessage": "The verification code to your new account is {####}"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "userPoolcognitodomain5F5914A6": {
      "Type": "AWS::Cognito::UserPoolDomain",
      "Properties": {
        "Domain": {
          "Fn::Join": [
            "",
            [
              "clickstream",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "UserPoolId": {
          "Ref": "userPoolDC9497E0"
        }
      }
    },
    "clickstreambackendclient721D6562": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "AllowedOAuthFlows": [
          "implicit",
          "code"
        ],
        "AllowedOAuthFlowsUserPoolClient": true,
        "AllowedOAuthScopes": [
          "openid",
          "email",
          "profile"
        ],
        "CallbackURLs": [
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplanePortalDistributionCAE911E8",
                    "DomainName"
                  ]
                },
                "/signin"
              ]
            ]
          }
        ],
        "LogoutURLs": [
          {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Fn::GetAtt": [
                    "cloudfrontcontrolplanePortalDistributionCAE911E8",
                    "DomainName"
                  ]
                }
              ]
            ]
          }
        ],
        "PreventUserExistenceErrors": "ENABLED",
        "SupportedIdentityProviders": [
          "COGNITO"
        ],
        "UserPoolId": {
          "Ref": "userPoolDC9497E0"
        }
      }
    },
    "backenduser": {
      "Type": "AWS::Cognito::UserPoolUser",
      "Properties": {
        "UserAttributes": [
          {
            "Name": "email",
            "Value": {
              "Ref": "Email"
            }
          }
        ],
        "UserPoolId": {
          "Ref": "userPoolDC9497E0"
        },
        "Username": {
          "Ref": "Email"
        }
      }
    },
    "AuthorizerFunctionServiceRole5B2A061B": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AuthorizerFunctionB4DBAA43": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "9abb11e389d735120f814dedb8902ddb561c20555d210f8bb53be564bb4b1565.zip"
        },
        "Environment": {
          "Variables": {
            "ISSUER": {
              "Fn::Join": [
                "",
                [
                  "https://cognito-idp.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".amazonaws.com/",
                  {
                    "Ref": "userPoolDC9497E0"
                  }
                ]
              ]
            },
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "AuthorizerFunctionServiceRole5B2A061B",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15
      },
      "DependsOn": [
        "AuthorizerFunctionServiceRole5B2A061B"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by AuthorizerFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by AuthorizerFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "AuthorizerFunctionLogRetention20FD5AF7": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "AuthorizerFunctionB4DBAA43"
              }
            ]
          ]
        },
        "RetentionInDays": 3653
      }
    },
    "AuthorizerFunctionCloudFrontS3PortalStackJWTAuthorizerA3029760PermissionsAAA62F3C": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerFunctionB4DBAA43",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ClickStreamApi748490D9"
              },
              "/authorizers/",
              {
                "Ref": "JWTAuthorizerE8D8D90E"
              }
            ]
          ]
        }
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": [
          {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by CDK built-in LogRetention, * logs resources for read only access or IAM limitation."
            }
          ]
        }
      }
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Runtime": "nodejs18.x",
        "Timeout": 900,
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "5bc602ecde93c947efe5899ae355f999986a1acbe610b1c0b9c468d738857555.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by CDK built-in LogRetention for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by CDK built-in LogRetention for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "JWTAuthorizerE8D8D90E": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 0,
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Fn::Select": [
                  1,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "AuthorizerFunctionB4DBAA43",
                          "Arn"
                        ]
                      }
                    ]
                  }
                ]
              },
              ":apigateway:",
              {
                "Fn::Select": [
                  3,
                  {
                    "Fn::Split": [
                      ":",
                      {
                        "Fn::GetAtt": [
                          "AuthorizerFunctionB4DBAA43",
                          "Arn"
                        ]
                      }
                    ]
                  }
                ]
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthorizerFunctionB4DBAA43",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "IdentitySource": "method.request.header.Authorization",
        "IdentityValidationExpression": "^(Bearer )[a-zA-Z0-9-_]+?.[a-zA-Z0-9-_]+?.([a-zA-Z0-9-_]+)$",
        "Name": "CloudFrontS3PortalStackJWTAuthorizerA3029760",
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        },
        "Type": "TOKEN"
      }
    },
    "ClickStreamApiClickstreamDictionaryFDA4AD32": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "name",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "name",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiClickstreamMetadataEC136DD8": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          },
          {
            "AttributeName": "createAt",
            "AttributeType": "N"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "prefix-time-index",
            "KeySchema": [
              {
                "AttributeName": "prefix",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "createAt",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "type",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        },
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiAnalyticsMetadata4C5E5BA1": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "month",
            "AttributeType": "S"
          },
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "prefix-month-index",
            "KeySchema": [
              {
                "AttributeName": "prefix",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "month",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            }
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "month",
            "KeyType": "RANGE"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "SSESpecification": {
          "SSEEnabled": true
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiClickstreamDictionaryFDA4AD32",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC",
        "Roles": [
          {
            "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "312bdb31436491ab1c59e59063389969faaac2f696bd0584d4f8ecd692b79bcf.zip"
        },
        "Description": "Lambda function for dictionary init of solution Click Stream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30
      },
      "DependsOn": [
        "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleDefaultPolicy51DD59EC",
        "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by DicInitCustomResourceFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85",
        "Roles": [
          {
            "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94"
          }
        ]
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "7382a0addb9f34974a1ea6c6c9b063882af874828f366f5c93b2b7b64db15c94.zip"
        },
        "Description": "AWS CDK resource provider framework - onEvent (CloudFrontS3PortalStack/ClickStreamApi/BatchInsertDDBCustomResource/DicInitCustomResourceProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7",
                "Arn"
              ]
            }
          }
        },
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900
      },
      "DependsOn": [
        "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRoleDefaultPolicy4B5DBE85",
        "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventServiceRole124C5C94"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by CDK built-in provider for DicInitCustomResourceProvider for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by CDK built-in provider for DicInitCustomResourceProvider for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventLogRetention5C141DD0": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5"
              }
            ]
          ]
        },
        "RetentionInDays": 5
      }
    },
    "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceB9A4ABDE": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceProviderframeworkonEventCEE52DB5",
            "Arn"
          ]
        },
        "tableName": {
          "Ref": "ClickStreamApiClickstreamDictionaryFDA4AD32"
        },
        "items": [
          {
            "name": "Solution",
            "data": {
              "name": "__SOLUTION_NAME__",
              "dist_output_bucket": "__DIST_OUTPUT_BUCKET__",
              "target": "__TARGET__",
              "prefix": "__PREFIX__",
              "version": "__SOLUTION_VERSION__"
            }
          },
          {
            "name": "Templates",
            "data": {
              "Ingestion_s3": "ingestion-server-s3-stack.template.json",
              "Ingestion_kafka": "ingestion-server-kafka-stack.template.json",
              "Ingestion_kinesis": "ingestion-server-kinesis-stack.template.json",
              "KafkaConnector": "kafka-s3-sink-stack.template.json",
              "DataProcessing": "data-pipeline-stack.template.json",
              "DataModelingRedshift": "data-analytics-redshift-stack.template.json",
              "Reporting": "data-reporting-quicksight-stack.template.json",
              "Metrics": "metrics-stack.template.json",
              "DataModelingAthena": "data-modeling-athena-stack.template.json",
              "ServiceCatalogAppRegistry": "service-catalog-appregistry-stack.template.json"
            }
          },
          {
            "name": "BuiltInPlugins",
            "data": [
              {
                "id": "BUILT-IN-1",
                "type": "PLUGIN#BUILT-IN-1",
                "prefix": "PLUGIN",
                "name": "Transformer",
                "description": {
                  "en-US": "Convert the data format reported by SDK into the data format in the data warehouse",
                  "zh-CN": "把SDK上报的数据格式，转换成数据仓库中的数据格式"
                },
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.TransformerV2",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Transform",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              },
              {
                "id": "BUILT-IN-2",
                "type": "PLUGIN#BUILT-IN-2",
                "prefix": "PLUGIN",
                "name": "UAEnrichment",
                "description": {
                  "en-US": "Derive OS, device, browser information from User Agent string from the HTTP request header",
                  "zh-CN": "从 HTTP 请求标头的用户代理（User Agent)字符串中获取操作系统、设备和浏览器信息"
                },
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.UAEnrichment",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Enrich",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              },
              {
                "id": "BUILT-IN-3",
                "type": "PLUGIN#BUILT-IN-3",
                "prefix": "PLUGIN",
                "name": "IPEnrichment",
                "description": {
                  "en-US": "Derive location information (e.g., city, country, region) based on the request source IP",
                  "zh-CN": "根据请求源 IP 获取位置信息（例如，城市、国家、地区）"
                },
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.IPEnrichment",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Enrich",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              },
              {
                "id": "BUILT-IN-4",
                "type": "PLUGIN#BUILT-IN-4",
                "prefix": "PLUGIN",
                "name": "GTMServerDataTransformer",
                "description": {
                  "en-US": "Convert the GTM server data format into the data format in the data warehouse",
                  "zh-CN": "把GTM服务的数据格式，转换成数据仓库中的数据格式"
                },
                "builtIn": true,
                "mainFunction": "software.aws.solution.clickstream.gtm.GTMServerDataTransformer",
                "jarFile": "",
                "bindCount": 0,
                "pluginType": "Transform",
                "dependencyFiles": [],
                "operator": "",
                "deleted": false,
                "createAt": 1667355960000,
                "updateAt": 1667355960000
              }
            ]
          },
          {
            "name": "MetadataBuiltInList",
            "data": {
              "PresetEvents": [
                {
                  "name": "_first_open",
                  "description": {
                    "en-US": "When the user launches an app the first time after installation",
                    "zh-CN": "当用户安装后第一次启动应用程序时"
                  }
                },
                {
                  "name": "_session_start",
                  "description": {
                    "en-US": "When a user first open the app or a user returns to the app after 30 minutes of inactivity period",
                    "zh-CN": "当用户首次打开App或用户在 30 分钟不活动后返回App时"
                  }
                },
                {
                  "name": "_screen_view",
                  "description": {
                    "en-US": "When new screen is opens",
                    "zh-CN": "当新的屏幕打开时"
                  }
                },
                {
                  "name": "_user_engagement",
                  "description": {
                    "en-US": "When user navigates away from current screen and the screen is in focus for at least one second",
                    "zh-CN": "当用户离开当前屏幕并且屏幕处于焦点状态至少一秒钟时"
                  }
                },
                {
                  "name": "_app_start",
                  "description": {
                    "en-US": "Every time the app goes to visible",
                    "zh-CN": "每次App变为可见时"
                  }
                },
                {
                  "name": "_app_end",
                  "description": {
                    "en-US": "Every time the app goes to invisible",
                    "zh-CN": "每次App变为不可见时"
                  }
                },
                {
                  "name": "_profile_set",
                  "description": {
                    "en-US": "When the addUserAttributes() or setUserId() API is called",
                    "zh-CN": "当调用 addUserAttributes() 或 setUserId() API 时"
                  }
                },
                {
                  "name": "_app_exception",
                  "description": {
                    "en-US": "When the app crashes",
                    "zh-CN": "当应用程序崩溃时"
                  }
                },
                {
                  "name": "_app_update",
                  "description": {
                    "en-US": "When the app is updated to a new version and launched again",
                    "zh-CN": "当App更新到新版本并再次启动时"
                  }
                },
                {
                  "name": "_os_update",
                  "description": {
                    "en-US": "When device operating system is updated to a new version",
                    "zh-CN": "当操作系统更新到新版本时"
                  }
                },
                {
                  "name": "_clickstream_error",
                  "description": {
                    "en-US": "Event name is invalid or user attribute is invalid",
                    "zh-CN": "事件名称无效或用户属性无效时"
                  }
                },
                {
                  "name": "_page_view",
                  "description": {
                    "en-US": "When new page is opens",
                    "zh-CN": "当新的页面打开时"
                  }
                },
                {
                  "name": "_scroll",
                  "description": {
                    "en-US": "The first time a user reaches the bottom of each page",
                    "zh-CN": "用户第一次到达每个页面的底部时"
                  }
                },
                {
                  "name": "_search",
                  "description": {
                    "en-US": "Each time a user performs a site search",
                    "zh-CN": "每次用户执行站点搜索时，根据 URL 查询参数的存在来判断"
                  }
                },
                {
                  "name": "_click",
                  "description": {
                    "en-US": "Each time a user clicks a link that leads away from the current domain",
                    "zh-CN": "每次用户单击将其带离当前域名（或配置的域名列表）的链接时"
                  }
                },
                {
                  "name": "_mp_share",
                  "description": {
                    "en-US": "When user shares the mini program to others",
                    "zh-CN": "当用户分享微信小程序时"
                  }
                },
                {
                  "name": "_mp_favorite",
                  "description": {
                    "en-US": "When user adds the mini program to favorites",
                    "zh-CN": "当用户收藏微信小程序时"
                  }
                }
              ],
              "PresetEventParameters": [
                {
                  "name": "_screen_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The screen ID",
                    "zh-CN": "屏幕ID"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_previous_screen_name",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The previous screen name",
                    "zh-CN": "上一个屏幕名称"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_previous_screen_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The previous screen ID",
                    "zh-CN": "上一个屏幕ID"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_previous_screen_unique_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The previous screen unique ID",
                    "zh-CN": "上一个屏幕唯一ID"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_page_referrer",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Last page url",
                    "zh-CN": "前一个页面URL"
                  },
                  "eventName": "_page_view"
                },
                {
                  "name": "_page_referrer_title",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Last page title",
                    "zh-CN": "前一个页面标题"
                  },
                  "eventName": "_page_view"
                },
                {
                  "name": "_entrances",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The first screen view event in a session is 1, others is 0",
                    "zh-CN": "会话中的第一个屏幕浏览事件该值为 1，其他则为 0"
                  },
                  "eventName": "_page_view"
                },
                {
                  "name": "_entrances",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The first screen view event in a session is 1, others is 0",
                    "zh-CN": "会话中的第一个屏幕浏览事件该值为 1，其他则为 0"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_previous_timestamp",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The timestamp of the previous _screen_view event",
                    "zh-CN": "上一个 screen_view 事件的时间戳"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_previous_timestamp",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The timestamp of the previous _screen_view event",
                    "zh-CN": "上一个 screen_view 事件的时间戳"
                  },
                  "eventName": "_page_view"
                },
                {
                  "name": "_engagement_time_msec",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The previous page last engagement milliseconds",
                    "zh-CN": "上个屏幕最后一次用户参与事件时长的毫秒数"
                  },
                  "eventName": "_screen_view"
                },
                {
                  "name": "_engagement_time_msec",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The previous page last engagement milliseconds",
                    "zh-CN": "上个屏幕最后一次用户参与事件时长的毫秒数"
                  },
                  "eventName": "_page_view"
                },
                {
                  "name": "_engagement_time_msec",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The previous page last engagement milliseconds",
                    "zh-CN": "上个屏幕最后一次用户参与事件时长的毫秒数"
                  },
                  "eventName": "_user_engagement"
                },
                {
                  "name": "_is_first_time",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "When it is the first _app_start event after the application starts, the value is true",
                    "zh-CN": "当应用程序启动后第一个 _app_start 事件时，值为 true"
                  },
                  "eventName": "_app_start"
                },
                {
                  "name": "_exception_message",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The message of exception",
                    "zh-CN": "异常信息"
                  },
                  "eventName": "_app_exception"
                },
                {
                  "name": "_exception_stack",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The stack details of exception",
                    "zh-CN": "异常堆栈信息"
                  },
                  "eventName": "_app_exception"
                },
                {
                  "name": "_previous_app_version",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The version of previous app",
                    "zh-CN": "上一个应用版本"
                  },
                  "eventName": "_app_update"
                },
                {
                  "name": "_previous_os_version",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The version of previous operating system",
                    "zh-CN": "上一个操作系统版本"
                  },
                  "eventName": "_os_update"
                },
                {
                  "name": "_error_code",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Error code",
                    "zh-CN": "错误代码"
                  },
                  "eventName": "_clickstream_error"
                },
                {
                  "name": "_error_message",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Error message",
                    "zh-CN": "错误信息"
                  },
                  "eventName": "_clickstream_error"
                },
                {
                  "name": "_search_key",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The keyword name",
                    "zh-CN": "搜索参数名称"
                  },
                  "eventName": "_search"
                },
                {
                  "name": "_search_term",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The search content",
                    "zh-CN": "搜索内容"
                  },
                  "eventName": "_search"
                },
                {
                  "name": "_link_classes",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The content of class in tag <a>",
                    "zh-CN": "标签 <a>中class里的内容"
                  },
                  "eventName": "_click"
                },
                {
                  "name": "_link_domain",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The domain of href in tag <a>",
                    "zh-CN": "标签 <a>中href里的域名"
                  },
                  "eventName": "_click"
                },
                {
                  "name": "_link_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The content of id in tag <a>",
                    "zh-CN": "标签 <a>中id里的内容"
                  },
                  "eventName": "_click"
                },
                {
                  "name": "_link_url",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The content of href in tag <a>",
                    "zh-CN": "标签 <a>中href里的内容"
                  },
                  "eventName": "_click"
                },
                {
                  "name": "_outbound",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "If the domain is not in configured domain list, the attribute value is true",
                    "zh-CN": "如果该域不在配置的域名列表中，则属性值为true"
                  },
                  "eventName": "_click"
                },
                {
                  "name": "_traffic_source_medium",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Traffic medium. Use this attribute to store the medium that acquired user when events were logged. Example: Email, Paid search, Search engine",
                    "zh-CN": "流量媒介，存储事件记录时获取用户的媒介，例如：电子邮件、付费搜索、搜索引擎"
                  }
                },
                {
                  "name": "_traffic_source_name",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Traffic name. Use this attribute to store the marketing campaign that acquired user when events were logged. Example: Summer promotion",
                    "zh-CN": "流量名称，存储事件记录时获取用户的营销活动，例如：夏季促销"
                  }
                },
                {
                  "name": "_traffic_source_source",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Traffic source. Name of the network source that acquired the user when the event were reported. Example: Google, Facebook, Bing, Baidu",
                    "zh-CN": "流量来源，事件报告时获取的网络来源的名称，例如：Google, Facebook, Bing, Baidu"
                  }
                },
                {
                  "name": "_channel",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Install source, it is the channel for app was downloaded",
                    "zh-CN": "安装源，app下载的渠道"
                  }
                },
                {
                  "name": "_session_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The session ID",
                    "zh-CN": "会话ID"
                  }
                },
                {
                  "name": "_session_start_timestamp",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The session start timestamp",
                    "zh-CN": "会话开始时间戳"
                  }
                },
                {
                  "name": "_session_duration",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The session duration",
                    "zh-CN": "会话持续时间"
                  }
                },
                {
                  "name": "_session_number",
                  "dataType": "int",
                  "category": "event",
                  "description": {
                    "en-US": "The session number",
                    "zh-CN": "会话编号"
                  }
                },
                {
                  "name": "_latest_referrer",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Last off-site link",
                    "zh-CN": "最近一次站外链接"
                  }
                },
                {
                  "name": "_latest_referrer_host",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "Last off-site domain name",
                    "zh-CN": "最近一次站外域名"
                  }
                },
                {
                  "name": "_screen_name",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The screen name",
                    "zh-CN": "屏幕名称"
                  }
                },
                {
                  "name": "_screen_unique_id",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The screen unique ID",
                    "zh-CN": "屏幕唯一ID"
                  }
                },
                {
                  "name": "_page_title",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The page title",
                    "zh-CN": "页面标题"
                  }
                },
                {
                  "name": "_page_url",
                  "dataType": "string",
                  "category": "event",
                  "description": {
                    "en-US": "The page url",
                    "zh-CN": "页面URL"
                  }
                }
              ],
              "PublicEventParameters": [
                {
                  "name": "event_timestamp",
                  "dataType": "int",
                  "category": "other",
                  "description": {
                    "en-US": "The time (in microseconds, UTC) at which events are recorded on the client",
                    "zh-CN": "客户端上记录事件的时间（以微秒为单位，UTC）"
                  }
                },
                {
                  "name": "event_value_in_usd",
                  "dataType": "float",
                  "category": "other",
                  "description": {
                    "en-US": "The currency conversion value of the 'value' parameter of the event (in USD)",
                    "zh-CN": "事件的“值”参数的货币转换值（以USD为单位）"
                  }
                },
                {
                  "name": "platform",
                  "dataType": "string",
                  "category": "other",
                  "description": {
                    "en-US": "The platform",
                    "zh-CN": "平台"
                  }
                },
                {
                  "name": "project_id",
                  "dataType": "string",
                  "category": "other",
                  "description": {
                    "en-US": "Project ID associated with the application",
                    "zh-CN": "与应用相关联的项目ID"
                  }
                },
                {
                  "name": "user_id",
                  "dataType": "string",
                  "category": "other",
                  "description": {
                    "en-US": "The unique ID assigned to a user through setUserId() API",
                    "zh-CN": "通过 setUserId(）API分配给用户的唯一ID"
                  }
                },
                {
                  "name": "user_pseudo_id",
                  "dataType": "string",
                  "category": "other",
                  "description": {
                    "en-US": "The pseudonymous id generated by SDK for the user",
                    "zh-CN": "SDK为用户生成的伪ID"
                  }
                },
                {
                  "name": "mobile_brand_name",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device brand name",
                    "zh-CN": "设备品牌名称"
                  }
                },
                {
                  "name": "mobile_model_name",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device model name",
                    "zh-CN": "设备型号名称"
                  }
                },
                {
                  "name": "manufacturer",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device manufacturer name",
                    "zh-CN": "设备制造商名称"
                  }
                },
                {
                  "name": "carrier",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device carrier name",
                    "zh-CN": "设备网络提供商名称"
                  }
                },
                {
                  "name": "network_type",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device network type",
                    "zh-CN": "设备的网络类型"
                  }
                },
                {
                  "name": "operating_system",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Operating system type",
                    "zh-CN": "操作系统"
                  }
                },
                {
                  "name": "operating_system_version",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Operating system version",
                    "zh-CN": "操作系统"
                  }
                },
                {
                  "name": "system_language",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Operating system language",
                    "zh-CN": "操作系统语言"
                  }
                },
                {
                  "name": "vendor_id",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "IDFV (only present when IDFA is not collected)",
                    "zh-CN": "IDFV（仅在未收集 IDFA 时存在）"
                  }
                },
                {
                  "name": "advertising_id",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Advertising ID/IDFV",
                    "zh-CN": "广告 ID/IDFA"
                  }
                },
                {
                  "name": "time_zone_offset_seconds",
                  "dataType": "int",
                  "category": "device",
                  "description": {
                    "en-US": "Offset from GMT in seconds",
                    "zh-CN": "与 GMT 的偏移量（以秒为单位）"
                  }
                },
                {
                  "name": "ua_browser",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Browser for users to view content, derived from the User Agent string",
                    "zh-CN": "用户查看内容的浏览器，从 User Agent 字符串中派生"
                  }
                },
                {
                  "name": "ua_browser_version",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "The version of browser for users to view content, derived from the User Agent string",
                    "zh-CN": "用户查看内容的浏览器版本，从 User Agent 字符串中派生"
                  }
                },
                {
                  "name": "ua_device",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "Device for users to view content, derived from the User Agent string",
                    "zh-CN": "用户查看内容的设备，从 User Agent 字符串中派生"
                  }
                },
                {
                  "name": "ua_device_category",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "The category of device for users to view content, derived from the User Agent string",
                    "zh-CN": "用户查看内容的设备类别，从 User Agent 字符串中派生"
                  }
                },
                {
                  "name": "ua_os",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "The operating system of device for users to view content, derived from the User Agent string",
                    "zh-CN": "用户查看内容的设备操作系统，从 User Agent 字符串中派生"
                  }
                },
                {
                  "name": "screen_width",
                  "dataType": "int",
                  "category": "device",
                  "description": {
                    "en-US": "The screen width",
                    "zh-CN": "屏幕宽度"
                  }
                },
                {
                  "name": "screen_height",
                  "dataType": "int",
                  "category": "device",
                  "description": {
                    "en-US": "The screen height",
                    "zh-CN": "屏幕高度"
                  }
                },
                {
                  "name": "viewport_width",
                  "dataType": "int",
                  "category": "device",
                  "description": {
                    "en-US": "The website viewport width pixel",
                    "zh-CN": "视区宽度"
                  }
                },
                {
                  "name": "viewport_height",
                  "dataType": "int",
                  "category": "device",
                  "description": {
                    "en-US": "The website viewport height pixel",
                    "zh-CN": "视区高度"
                  }
                },
                {
                  "name": "host_name",
                  "dataType": "string",
                  "category": "device",
                  "description": {
                    "en-US": "The website hostname",
                    "zh-CN": "网站主机名"
                  }
                },
                {
                  "name": "continent",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The continent that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的大陆"
                  }
                },
                {
                  "name": "sub_continent",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The sub continent that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的子大陆"
                  }
                },
                {
                  "name": "country",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The country that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的国家"
                  }
                },
                {
                  "name": "region",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The region that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的地区"
                  }
                },
                {
                  "name": "city",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The city that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的城市"
                  }
                },
                {
                  "name": "latitude",
                  "dataType": "double",
                  "category": "geo",
                  "description": {
                    "en-US": "The latitude that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的纬度"
                  }
                },
                {
                  "name": "longitude",
                  "dataType": "double",
                  "category": "geo",
                  "description": {
                    "en-US": "The longitude that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的经度"
                  }
                },
                {
                  "name": "accuracy",
                  "dataType": "int",
                  "category": "geo",
                  "description": {
                    "en-US": "The accuracy that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的精度"
                  }
                },
                {
                  "name": "locale",
                  "dataType": "string",
                  "category": "geo",
                  "description": {
                    "en-US": "The locale that reporting events based on IP addresses",
                    "zh-CN": "基于 IP 地址报告事件的地址"
                  }
                },
                {
                  "name": "name",
                  "dataType": "string",
                  "category": "traffic_source",
                  "description": {
                    "en-US": "Traffic name. Use this attribute to store the marketing campaign that acquired user when events were logged. Example: Summer promotion",
                    "zh-CN": "流量名称，存储事件记录时获取用户的营销活动，例如：夏季促销"
                  }
                },
                {
                  "name": "medium",
                  "dataType": "string",
                  "category": "traffic_source",
                  "description": {
                    "en-US": "Traffic medium. Use this attribute to store the medium that acquired user when events were logged. Example: Email, Paid search, Search engine",
                    "zh-CN": "流量媒介，存储事件记录时获取用户的媒介，例如：电子邮件、付费搜索、搜索引擎"
                  }
                },
                {
                  "name": "source",
                  "dataType": "string",
                  "category": "traffic_source",
                  "description": {
                    "en-US": "Traffic source. Name of the network source that acquired the user when the event were reported. Example: Google, Facebook, Bing, Baidu",
                    "zh-CN": "流量来源，事件报告时获取的网络来源的名称，例如：Google, Facebook, Bing, Baidu"
                  }
                },
                {
                  "name": "id",
                  "dataType": "string",
                  "category": "app_info",
                  "description": {
                    "en-US": "The package name or Bundle ID of the application",
                    "zh-CN": "应用程序的软件包名称或 Bundle ID"
                  }
                },
                {
                  "name": "app_id",
                  "dataType": "string",
                  "category": "app_info",
                  "description": {
                    "en-US": "App ID associated with the application",
                    "zh-CN": "与应用相关联的 App ID"
                  }
                },
                {
                  "name": "install_source",
                  "dataType": "string",
                  "category": "app_info",
                  "description": {
                    "en-US": "Store where applications are installed",
                    "zh-CN": "安装应用程序的商店"
                  }
                },
                {
                  "name": "version",
                  "dataType": "string",
                  "category": "app_info",
                  "description": {
                    "en-US": "Version Name (Android) or short bundle version of the application",
                    "zh-CN": "应用程序的 versionName（Android）或简短的 bundle 版本"
                  }
                }
              ],
              "PresetUserAttributes": [
                {
                  "name": "_user_id",
                  "dataType": "string",
                  "category": "user",
                  "description": {
                    "en-US": "The unique ID assigned to a user through setUserId() API",
                    "zh-CN": "通过 setUserId(）API分配给用户的唯一ID"
                  }
                },
                {
                  "name": "_user_first_touch_timestamp",
                  "dataType": "int",
                  "category": "user",
                  "description": {
                    "en-US": "Added to the user object for all events. The time (in milliseconds) when the user first opened the app",
                    "zh-CN": "用户首次打开应用程序或访问站点的时间（以毫秒为单位），在 user 对象的每个事件中都包含此属性"
                  }
                },
                {
                  "name": "_first_visit_date",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The date when the user first opened the app",
                    "zh-CN": "用户首次打开应用程序或访问站点的日期"
                  }
                },
                {
                  "name": "_first_referer",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The referer when the user first opened the app",
                    "zh-CN": "用户第一次打开应用程序时的外链"
                  }
                },
                {
                  "name": "_first_traffic_source_type",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The first-captured traffic source name",
                    "zh-CN": "第一个捕获的流量源名称"
                  }
                },
                {
                  "name": "_first_traffic_medium",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The first-captured traffic source medium",
                    "zh-CN": "第一个捕获的流量媒介"
                  }
                },
                {
                  "name": "_first_traffic_source",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The first-captured traffic source",
                    "zh-CN": "第一个捕获的流量来源"
                  }
                },
                {
                  "name": "_channel",
                  "dataType": "string",
                  "category": "user_outer",
                  "description": {
                    "en-US": "The first-captured channel",
                    "zh-CN": "第一个捕获的渠道"
                  }
                }
              ]
            }
          }
        ]
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceBD22F9F9": {
      "Type": "Custom::AWS",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn"
          ]
        },
        "Create": {
          "Fn::Join": [
            "",
            [
              "{\"service\":\"DynamoDB\",\"action\":\"putItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
              {
                "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
              },
              "\",\"Item\":{\"id\":{\"S\":\"",
              {
                "Ref": "Email"
              },
              "\"},\"type\":{\"S\":\"USER\"},\"prefix\":{\"S\":\"USER\"},\"roles\":{\"L\":[{\"S\":\"Admin\"}]},\"createAt\":{\"N\":\"1701085022963\"},\"updateAt\":{\"N\":\"1701085022963\"},\"operator\":{\"S\":\"Clickstream\"},\"deleted\":{\"BOOL\":false}},\"ConditionExpression\":\"attribute_not_exists(id)\"}}"
            ]
          ]
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{\"service\":\"DynamoDB\",\"action\":\"updateItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
              {
                "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
              },
              "\",\"Key\":{\"id\":{\"S\":\"",
              {
                "Ref": "Email"
              },
              "\"},\"type\":{\"S\":\"USER\"}},\"UpdateExpression\":\"SET #roles = :roles, #prefix = :prefix, #createAt = :createAt, #updateAt = :updateAt, #operator = :operator, #deleted = :deleted\",\"ExpressionAttributeNames\":{\"#roles\":\"roles\",\"#createAt\":\"createAt\",\"#updateAt\":\"updateAt\",\"#operator\":\"operator\",\"#deleted\":\"deleted\",\"#prefix\":\"prefix\"},\"ExpressionAttributeValues\":{\":prefix\":{\"S\":\"USER\"},\":roles\":{\"L\":[{\"S\":\"Admin\"}]},\":createAt\":{\"N\":\"1701085022963\"},\":updateAt\":{\"N\":\"1701085022963\"},\":operator\":{\"S\":\"Clickstream\"},\":deleted\":{\"BOOL\":false}}}}"
            ]
          ]
        },
        "Delete": {
          "Fn::Join": [
            "",
            [
              "{\"service\":\"DynamoDB\",\"action\":\"deleteItem\",\"physicalResourceId\":{\"id\":\"AddAdminUserCustomResource\"},\"parameters\":{\"TableName\":\"",
              {
                "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
              },
              "\",\"Key\":{\"id\":{\"S\":\"",
              {
                "Ref": "Email"
              },
              "\"},\"type\":{\"S\":\"USER\"}},\"ConditionExpression\":\"attribute_exists(id)\"}}"
            ]
          ]
        },
        "InstallLatestAwsSdk": false
      },
      "DependsOn": [
        "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClickStreamApiClickstreamMetadataEC136DD8",
                  "Arn"
                ]
              },
              "Sid": "DynamoWriteAccess"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiAddAdminUserCustomResourceAddAdminUserAwsCustomResourceCustomResourcePolicyB7F90F13",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
          }
        ]
      }
    },
    "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by StackActionStateMachine, * xray/logs resources for read only access or IAM limitation."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackActionStateMachineActionFunction8314F7B4": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "21247f716c25f54c1d976929679346dcd38cbbc84b80ccd6a8fc13bd860eeaab.zip"
        },
        "Description": "Lambda function for state machine action of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "actionfunceniA16F9174",
        "ClickStreamApiStackActionStateMachineActionFunctionRoleDefaultPolicy602A4F26",
        "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by ActionFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "ClickStreamApiStackActionStateMachineActionFunctionRolePolicy842C654C": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "cloudformation:CreateStack",
                "cloudformation:UpdateStack",
                "cloudformation:DeleteStack",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateTerminationProtection"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/Clickstream-*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "iam:GetRole",
                "iam:PassRole",
                "iam:DetachRolePolicy",
                "iam:GetPolicy",
                "iam:DeleteRolePolicy",
                "iam:CreateRole",
                "iam:DeleteRole",
                "iam:AttachRolePolicy",
                "iam:PutRolePolicy",
                "iam:ListRolePolicies",
                "iam:GetRolePolicy",
                "iam:CreateInstanceProfile",
                "iam:DeleteInstanceProfile",
                "iam:RemoveRoleFromInstanceProfile",
                "iam:AddRoleToInstanceProfile",
                "iam:ListPolicies",
                "iam:ListRoles",
                "iam:UpdateRoleDescription",
                "iam:TagRole",
                "iam:UntagRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/Clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":policy/Clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":instance-profile/Clickstream*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "iam:PassRole",
                "iam:CreateServiceLinkedRole"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/elasticloadbalancing.amazonaws.com/AWSServiceRoleForElasticLoadBalancing"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/globalaccelerator.amazonaws.com/AWSServiceRoleForGlobalAccelerator"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":role/aws-service-role/servicecatalog-appregistry.amazonaws.com/AWSServiceRoleForAWSServiceCatalogAppRegistry"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "sns:*",
                "sqs:*",
                "redshift-serverless:*",
                "s3:*",
                "apigateway:*",
                "logs:*",
                "redshift:*",
                "dynamodb:*",
                "autoscaling:*",
                "application-autoscaling:*",
                "glue:*",
                "cloudwatch:*",
                "emr-serverless:*",
                "ssm:*",
                "ecs:*",
                "lambda:*",
                "quicksight:*",
                "ec2:*",
                "events:*",
                "elasticloadbalancing:*",
                "kinesis:*",
                "kafka:*",
                "states:*",
                "secretsmanager:*",
                "globalaccelerator:*",
                "kms:*",
                "athena:*",
                "servicecatalog:CreateApplication",
                "servicecatalog:UpdateApplication",
                "servicecatalog:DeleteApplication",
                "servicecatalog:GetApplication",
                "servicecatalog:GetAssociatedResource",
                "servicecatalog:AssociateResource",
                "servicecatalog:DisassociateResource",
                "servicecatalog:TagResource",
                "servicecatalog:UntagResource"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackActionStateMachineActionFunctionRolePolicy842C654C",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "F4",
              "reason": "This policy requires releted actions in order to start/delete/update cloudformation stacks with many other services"
            },
            {
              "id": "F39",
              "reason": "When start/delete/update cloudformation stacks, we have to PassRole to existing undeterministical roles."
            },
            {
              "id": "W76",
              "reason": "This policy needs to be able to execute stacks, and call other AWS service"
            },
            {
              "id": "W12",
              "reason": "This policy needs to be able to start/delete other cloudformation stacks of the plugin with unknown resources names"
            }
          ]
        }
      }
    },
    "ClickStreamApiStackActionStateMachineLogGroupEB2C2181": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/Clickstream/StackActionLogGroup-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackActionStateMachineRole732FABDC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "states"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackActionStateMachineRole732FABDC"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by StackActionStateMachine, * xray/logs resources for read only access or IAM limitation."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackActionStateMachine21A0158C": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"Execute Task\",\"States\":{\"Execute Task\":{\"Next\":\"End?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"End?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Action\",\"StringEquals\":\"End\",\"Next\":\"EndState\"}],\"Default\":\"Wait 15 Seconds\"},\"Wait 15 Seconds\":{\"Type\":\"Wait\",\"Seconds\":15,\"Next\":\"Describe Stack\"},\"Stack in progress?\":{\"Type\":\"Choice\",\"Choices\":[{\"Variable\":\"$.Result.StackStatus\",\"StringMatches\":\"*_IN_PROGRESS\",\"Next\":\"Wait 15 Seconds\"}],\"Default\":\"Callback Task\"},\"Describe Stack\":{\"Next\":\"Stack in progress?\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"Callback Task\":{\"Next\":\"EndState\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "ClickStreamApiStackActionStateMachineActionFunction8314F7B4",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"EndState\":{\"Type\":\"Pass\",\"End\":true}},\"TimeoutSeconds\":7200}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "ClickStreamApiStackActionStateMachineLogGroupEB2C2181",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "ClickStreamApiStackActionStateMachineRole732FABDC",
            "Arn"
          ]
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      },
      "DependsOn": [
        "ClickStreamApiStackActionStateMachineRoleDefaultPolicyA311B7F8",
        "ClickStreamApiStackActionStateMachineRole732FABDC"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickstreamSolutionDataBucket200465FE",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickstreamSolutionDataBucket200465FE",
                          "Arn"
                        ]
                      },
                      "/clickstream/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by WorkflowFunInStateAction, * xray resources for read only access or IAM limitation."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineWorkflowCFNPolicy4B22D20B": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudformation:DescribeStacks",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":cloudformation:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stack/Clickstream-*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackWorkflowStateMachineWorkflowCFNPolicy4B22D20B",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
          }
        ]
      }
    },
    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "a26cfa8fbdb0c054736da8c3102f80ed16657ebff22ddab6cc1b72e5cd1ee26c.zip"
        },
        "Description": "Lambda function for state machine workflow of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN",
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1"
          }
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
        "TracingConfig": {
          "Mode": "Active"
        }
      },
      "DependsOn": [
        "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleDefaultPolicyD3A5F5BE",
        "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D",
        "workflowfunceniF26BB9B3"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used by WorkflowFunction for deployment as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by WorkflowFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineLogGroup5A682818": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/vendedlogs/states/Clickstream/StackWorkflowLogGroup-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region"
                    },
                    "states"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
                          "Arn"
                        ]
                      },
                      ":*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
              }
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":execution:",
                    {
                      "Fn::Select": [
                        6,
                        {
                          "Fn::Split": [
                            ":",
                            {
                              "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
                            }
                          ]
                        }
                      ]
                    },
                    "*"
                  ]
                ]
              }
            },
            {
              "Action": [
                "events:PutTargets",
                "events:PutRule",
                "events:DescribeRule"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
                  ]
                ]
              }
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":stateMachine:clickstream-stack-workflow-",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                2,
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                ]
              }
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":execution:clickstream-stack-workflow-",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "-",
                            {
                              "Fn::Select": [
                                2,
                                {
                                  "Fn::Split": [
                                    "/",
                                    {
                                      "Ref": "AWS::StackId"
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "Policy is generated by StackWorkflowStateMachine, * xray/logs resources for read only access or IAM limitation."
            },
            {
              "id": "W76",
              "reason": "The state machine default policy document create by many CallAwsService."
            }
          ]
        }
      }
    },
    "ClickStreamApiStackWorkflowStateMachineC5F60F13": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{\"StartAt\":\"InputTask\",\"States\":{\"InputTask\":{\"Next\":\"TypeChoice\",\"Retry\":[{\"ErrorEquals\":[\"Lambda.ClientExecutionTimeoutException\",\"Lambda.ServiceException\",\"Lambda.AWSLambdaException\",\"Lambda.SdkClientException\"],\"IntervalSeconds\":2,\"MaxAttempts\":6,\"BackoffRate\":2}],\"Type\":\"Task\",\"OutputPath\":\"$.Payload\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::lambda:invoke\",\"Parameters\":{\"FunctionName\":\"",
              {
                "Fn::GetAtt": [
                  "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8",
                  "Arn"
                ]
              },
              "\",\"Payload.$\":\"$\"}},\"TypeChoice\":{\"Type\":\"Choice\",\"OutputPath\":\"$.Data\",\"Choices\":[{\"Variable\":\"$.Type\",\"StringEquals\":\"Stack\",\"Next\":\"StackExecution\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Serial\",\"Next\":\"SerialMap\"},{\"Variable\":\"$.Type\",\"StringEquals\":\"Parallel\",\"Next\":\"ParallelMap\"}],\"Default\":\"Pass\"},\"Pass\":{\"Type\":\"Pass\",\"End\":true},\"StackExecution\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Action.$\":\"$.Input.Action\",\"Token.$\":\"$$.Task.Token\",\"Input.$\":\"$.Input\",\"Callback.$\":\"$.Callback\"},\"StateMachineArn\":\"",
              {
                "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
              },
              "\"}},\"SerialMap\":{\"Type\":\"Map\",\"End\":true,\"Iterator\":{\"StartAt\":\"SerialCallSelf\",\"States\":{\"SerialCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":stateMachine:clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "\"}}}},\"ItemsPath\":\"$\",\"MaxConcurrency\":1},\"ParallelMap\":{\"Type\":\"Map\",\"End\":true,\"Iterator\":{\"StartAt\":\"ParallelCallSelf\",\"States\":{\"ParallelCallSelf\":{\"End\":true,\"Type\":\"Task\",\"Resource\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:::states:startExecution.sync:2\",\"Parameters\":{\"Input\":{\"Token.$\":\"$$.Task.Token\",\"MapRun\":true,\"Data.$\":\"$\"},\"StateMachineArn\":\"arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":states:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":stateMachine:clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "\"}}}},\"ItemsPath\":\"$\",\"MaxConcurrency\":40}},\"TimeoutSeconds\":259200}"
            ]
          ]
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "ClickStreamApiStackWorkflowStateMachineLogGroup5A682818",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Level": "ALL"
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958",
            "Arn"
          ]
        },
        "StateMachineName": {
          "Fn::Join": [
            "",
            [
              "clickstream-stack-workflow-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "TracingConfiguration": {
          "Enabled": true
        }
      },
      "DependsOn": [
        "ClickStreamApiStackWorkflowStateMachineRoleDefaultPolicyDCD707BA",
        "ClickStreamApiStackWorkflowStateMachineRoleFD8FA958"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete"
    },
    "ClickStreamApiClickStreamApiFunctionRole8C941F02": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiClickStreamApiFunctionRoleDefaultPolicy80979BAF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiClickstreamDictionaryFDA4AD32",
                    "Arn"
                  ]
                },
                {
                  "Ref": "AWS::NoValue"
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiClickstreamMetadataEC136DD8",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickStreamApiClickstreamMetadataEC136DD8",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiAnalyticsMetadata4C5E5BA1",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "ClickStreamApiAnalyticsMetadata4C5E5BA1",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiClickStreamApiFunctionRoleDefaultPolicy80979BAF",
        "Roles": [
          {
            "Ref": "ClickStreamApiClickStreamApiFunctionRole8C941F02"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W76",
              "reason": "This policy needs to be able to call other AWS service by design"
            }
          ]
        }
      }
    },
    "ClickStreamApiClickStreamApiStepFunctionPolicy21839BAD": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": [
                {
                  "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
                },
                {
                  "Ref": "ClickStreamApiStackWorkflowStateMachineC5F60F13"
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiClickStreamApiStepFunctionPolicy21839BAD",
        "Roles": [
          {
            "Ref": "ClickStreamApiClickStreamApiFunctionRole8C941F02"
          }
        ]
      }
    },
    "ClickStreamApiClickStreamApiAWSSdkPolicy5144153D": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeRegions",
                "ec2:DescribeVpcs",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeRouteTables",
                "ec2:DescribeVpcEndpoints",
                "ec2:DescribeSecurityGroupRules",
                "ec2:DescribeAvailabilityZones",
                "ec2:DescribeNatGateways",
                "kafka:ListClustersV2",
                "kafka:ListClusters",
                "kafka:ListNodes",
                "s3:ListAllMyBuckets",
                "redshift:DescribeClusters",
                "redshift:DescribeClusterSubnetGroups",
                "redshift-serverless:ListWorkgroups",
                "redshift-serverless:GetWorkgroup",
                "redshift-serverless:GetNamespace",
                "redshift-data:BatchExecuteStatement",
                "s3:ListBucket",
                "ds:AuthorizeApplication",
                "ds:UnauthorizeApplication",
                "ds:CheckAlias",
                "ds:CreateAlias",
                "ds:DescribeDirectories",
                "ds:DescribeTrusts",
                "ds:DeleteDirectory",
                "ds:CreateIdentityPoolDirectory",
                "s3:GetBucketLocation",
                "s3:GetBucketPolicy",
                "route53:ListHostedZones",
                "athena:ListWorkGroups",
                "iam:ListRoles",
                "iam:ListServerCertificates",
                "iam:GetContextKeysForCustomPolicy",
                "iam:SimulateCustomPolicy",
                "states:DescribeExecution",
                "acm:ListCertificates",
                "cloudformation:DescribeStacks",
                "secretsmanager:ListSecrets",
                "secretsmanager:GetSecretValue",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:EnableAlarmActions",
                "cloudwatch:DisableAlarmActions",
                "emr-serverless:ListApplications"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "quicksight:UpdateDashboardPermissions",
                "quicksight:CreateDataSet",
                "quicksight:DeleteDataSet",
                "quicksight:PassDataSet",
                "quicksight:PassDataSource",
                "quicksight:CreateDashboard",
                "quicksight:DeleteDashboard",
                "quicksight:UpdateDashboard",
                "quicksight:DescribeDashboard",
                "quicksight:UpdateDashboardPublishedVersion",
                "quicksight:CreateAnalysis",
                "quicksight:UpdateAnalysis",
                "quicksight:DeleteAnalysis"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":analysis/clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dashboard/clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dataset/clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":datasource/clickstream*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":analysis/_tmp_*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dashboard/_tmp_*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dataset/_tmp_*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "quicksight:GenerateEmbedUrlForRegisteredUser",
                "quicksight:RegisterUser",
                "quicksight:ListUsers",
                "quicksight:ListDataSets",
                "quicksight:ListDashboards",
                "quicksight:ListAnalyses"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":analysis/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dashboard/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":dataset/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":quicksight:*:",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":user/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "quicksight:DescribeAccountSubscription",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":quicksight:*:",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":*"
                  ]
                ]
              }
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":iam::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":role/Clickstream-DataModeling*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiClickStreamApiAWSSdkPolicy5144153D",
        "Roles": [
          {
            "Ref": "ClickStreamApiClickStreamApiFunctionRole8C941F02"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda need to be queried all resources under the current account by design"
            },
            {
              "id": "W76",
              "reason": "This policy needs to be able to call other AWS service by design"
            }
          ]
        }
      }
    },
    "ClickStreamApiUploadRole7BE99918": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "ClickStreamApiClickStreamApiFunctionRole8C941F02",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        }
      }
    },
    "ClickStreamApiUploadRoleDefaultPolicyE2E4FB33": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::GetAtt": [
                        "ClickstreamSolutionDataBucket200465FE",
                        "Arn"
                      ]
                    },
                    "/plugins/*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "ClickStreamApiUploadRoleDefaultPolicyE2E4FB33",
        "Roles": [
          {
            "Ref": "ClickStreamApiUploadRole7BE99918"
          }
        ]
      }
    },
    "ClickStreamApiLambdaAdapterLayerX86C4A72260": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "CompatibleRuntimes": [
          "nodejs16.x",
          "nodejs18.x"
        ],
        "Content": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "a6d0e93ac324f82e230fd2c140141f35a48d2d3726152bfb880cd944011e2781.zip"
        }
      }
    },
    "ClickStreamApiQuickSightEmbedRole56794DF9": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "quicksight:GenerateEmbedUrlForRegisteredUser",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":quicksight:*:",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":dashboard/clickstream*"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:",
                          {
                            "Ref": "AWS::Partition"
                          },
                          ":quicksight:*:",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          ":user/*"
                        ]
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "quickSightEmbedPolicy"
          }
        ]
      }
    },
    "ClickStreamApiApiFunction684A4D61": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Architectures": [
          "x86_64"
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "e6a10da3c1c36e9943fd7e0fa5dfe7d6cefd140e7b48c38eb40ee8b41a0751d1.zip"
        },
        "Description": "Lambda function for api of solution Clickstream Analytics on AWS",
        "Environment": {
          "Variables": {
            "AWS_LAMBDA_EXEC_WRAPPER": "/opt/bootstrap",
            "CLICK_STREAM_TABLE_NAME": {
              "Ref": "ClickStreamApiClickstreamMetadataEC136DD8"
            },
            "DICTIONARY_TABLE_NAME": {
              "Ref": "ClickStreamApiClickstreamDictionaryFDA4AD32"
            },
            "ANALYTICS_METADATA_TABLE_NAME": {
              "Ref": "ClickStreamApiAnalyticsMetadata4C5E5BA1"
            },
            "STACK_ACTION_STATE_MACHINE": {
              "Ref": "ClickStreamApiStackActionStateMachine21A0158C"
            },
            "STACK_WORKFLOW_STATE_MACHINE": {
              "Ref": "ClickStreamApiStackWorkflowStateMachineC5F60F13"
            },
            "STACK_WORKFLOW_S3_BUCKET": {
              "Ref": "ClickstreamSolutionDataBucket200465FE"
            },
            "PREFIX_TIME_GSI_NAME": "prefix-time-index",
            "PREFIX_MONTH_GSI_NAME": "prefix-month-index",
            "AWS_ACCOUNT_ID": {
              "Ref": "AWS::AccountId"
            },
            "AWS_URL_SUFFIX": {
              "Ref": "AWS::URLSuffix"
            },
            "WITH_AUTH_MIDDLEWARE": "false",
            "ISSUER": "",
            "STS_UPLOAD_ROLE_ARN": {
              "Fn::GetAtt": [
                "ClickStreamApiUploadRole7BE99918",
                "Arn"
              ]
            },
            "QUICKSIGHT_EMBED_ROLE_ARN": {
              "Fn::GetAtt": [
                "ClickStreamApiQuickSightEmbedRole56794DF9",
                "Arn"
              ]
            },
            "HEALTH_CHECK_PATH": "/",
            "QUICKSIGHT_CONTROL_PLANE_REGION": "us-east-1",
            "WITH_VALIDATE_ROLE": "true",
            "FULL_SOLUTION_VERSION": "v1.0.0",
            "POWERTOOLS_SERVICE_NAME": "ClickStreamAnalyticsOnAWS",
            "POWERTOOLS_LOGGER_SAMPLE_RATE": "1",
            "POWERTOOLS_LOGGER_LOG_EVENT": "true",
            "LOG_LEVEL": "WARN"
          }
        },
        "Handler": "run.sh",
        "Layers": [
          {
            "Ref": "ClickStreamApiLambdaAdapterLayerX86C4A72260"
          }
        ],
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "ClickStreamApiClickStreamApiFunctionRole8C941F02",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30
      },
      "DependsOn": [
        "apifunceni59253B5A",
        "ClickStreamApiClickStreamApiFunctionRoleDefaultPolicy80979BAF",
        "ClickStreamApiClickStreamApiFunctionRole8C941F02"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda functions deployed outside VPC when cloudfront fronting backend api."
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used by ClickStreamApiFunction for deployment as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "ClickStreamApiLogGroup4497C29B": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "clickstream-loggroup-",
              {
                "Fn::Select": [
                  0,
                  {
                    "Fn::Split": [
                      "-",
                      {
                        "Fn::Select": [
                          2,
                          {
                            "Fn::Split": [
                              "/",
                              {
                                "Ref": "AWS::StackId"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          ]
        },
        "RetentionInDays": 180
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "Log group data is always encrypted in CloudWatch Logs. By default, CloudWatch Logs uses server-side encryption for the log data at rest."
            }
          ]
        }
      }
    },
    "ClickStreamApi748490D9": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "Name": "ClickStreamApi"
      }
    },
    "ClickStreamApiCloudWatchRole5F1F73C6": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
              ]
            ]
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "ClickStreamApiAccount2E4BAA6C": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ClickStreamApiCloudWatchRole5F1F73C6",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ClickStreamApi748490D9"
      ],
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "ClickStreamApiDeploymentB63E22179a44f35ea2f1e7603f26eed642e42c2e": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        }
      },
      "DependsOn": [
        "ClickStreamApiproxyANY2008788F",
        "ClickStreamApiproxyC314E806",
        "ClickStreamApiANY82946512"
      ]
    },
    "ClickStreamApiDeploymentStageapi40499B1B": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "ClickStreamApiLogGroup4497C29B",
              "Arn"
            ]
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] \"$context.httpMethod $context.resourcePath $context.protocol\" $context.status $context.responseLength $context.requestId"
        },
        "DeploymentId": {
          "Ref": "ClickStreamApiDeploymentB63E22179a44f35ea2f1e7603f26eed642e42c2e"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "ERROR",
            "MetricsEnabled": true,
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        },
        "StageName": "api",
        "TracingEnabled": true
      },
      "DependsOn": [
        "ClickStreamApiAccount2E4BAA6C"
      ]
    },
    "ClickStreamApiproxyC314E806": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ClickStreamApi748490D9",
            "RootResourceId"
          ]
        },
        "PathPart": "{proxy+}",
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        }
      }
    },
    "ClickStreamApiproxyANYApiPermissionCloudFrontS3PortalStackClickStreamApi9ABA9D52ANYproxy6B3A4D98": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClickStreamApiApiFunction684A4D61",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ClickStreamApi748490D9"
              },
              "/",
              {
                "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ClickStreamApiproxyANYApiPermissionTestCloudFrontS3PortalStackClickStreamApi9ABA9D52ANYproxy24375F9C": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClickStreamApiApiFunction684A4D61",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ClickStreamApi748490D9"
              },
              "/test-invoke-stage/*/*"
            ]
          ]
        }
      }
    },
    "ClickStreamApiproxyANY2008788F": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "JWTAuthorizerE8D8D90E"
        },
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiApiFunction684A4D61",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Ref": "ClickStreamApiproxyC314E806"
        },
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        }
      }
    },
    "ClickStreamApiANYApiPermissionCloudFrontS3PortalStackClickStreamApi9ABA9D52ANYD6769DE6": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClickStreamApiApiFunction684A4D61",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ClickStreamApi748490D9"
              },
              "/",
              {
                "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
              },
              "/*/"
            ]
          ]
        }
      }
    },
    "ClickStreamApiANYApiPermissionTestCloudFrontS3PortalStackClickStreamApi9ABA9D52ANYCFA4D498": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClickStreamApiApiFunction684A4D61",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ClickStreamApi748490D9"
              },
              "/test-invoke-stage/*/"
            ]
          ]
        }
      }
    },
    "ClickStreamApiANY82946512": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "JWTAuthorizerE8D8D90E"
        },
        "HttpMethod": "ANY",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ClickStreamApiApiFunction684A4D61",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "ResourceId": {
          "Fn::GetAtt": [
            "ClickStreamApi748490D9",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "ClickStreamApi748490D9"
        }
      }
    },
    "ClickStreamApiClickStreamApiUsagePlan731D8407": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ClickStreamApi748490D9"
            },
            "Stage": {
              "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
            },
            "Throttle": {}
          }
        ],
        "Throttle": {
          "BurstLimit": 100,
          "RateLimit": 50
        }
      }
    },
    "customresourcefunclogs9B71FED3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceFunction50F646E7"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "customresourcefunclogs9B71FED3",
        "Roles": [
          {
            "Ref": "ClickStreamApiBatchInsertDDBCustomResourceDicInitCustomResourceRoleF6845D40"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      }
    },
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}"
          },
          "S3Key": "17c16a3854838fd3ff4bda08146122a6701f33b9c86ae17f415ad0dc47a97544.zip"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 60
      },
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2"
      ],
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W89",
              "reason": "Lambda function is only used as cloudformation custom resources or per product design, no need to be deployed in VPC"
            },
            {
              "id": "W92",
              "reason": "Lambda function is only used as cloudformation custom resources or per product design, no need to set ReservedConcurrentExecutions"
            }
          ]
        }
      }
    },
    "AWS679f53fac002430cb0da5b7982bd2287LogRetentionCE72797A": {
      "Type": "Custom::LogRetention",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Fn::Join": [
            "",
            [
              "/aws/lambda/",
              {
                "Ref": "AWS679f53fac002430cb0da5b7982bd22872D164C4C"
              }
            ]
          ]
        },
        "RetentionInDays": 7
      }
    },
    "actionfunclogs394D90DA": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "ClickStreamApiStackActionStateMachineActionFunction8314F7B4"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "actionfunclogs394D90DA",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "actionfunceniA16F9174": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "actionfunceniA16F9174",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackActionStateMachineActionFunctionRole4D44D7D2"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    },
    "workflowfunclogs7A318BBF": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionD5F091A8"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "workflowfunclogs7A318BBF",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "workflowfunceniF26BB9B3": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "workflowfunceniF26BB9B3",
        "Roles": [
          {
            "Ref": "ClickStreamApiStackWorkflowStateMachineWorkflowFunctionRoleB4272C2D"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    },
    "apifunclogs9F7B9244": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    {
                      "Ref": "ClickStreamApiApiFunction684A4D61"
                    },
                    ":*"
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "apifunclogs9F7B9244",
        "Roles": [
          {
            "Ref": "ClickStreamApiClickStreamApiFunctionRole8C941F02"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service writes to undetermined logs stream by design"
            }
          ]
        }
      }
    },
    "apifunceni59253B5A": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DeleteNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:UnassignPrivateIpAddresses"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "apifunceni59253B5A",
        "Roles": [
          {
            "Ref": "ClickStreamApiClickStreamApiFunctionRole8C941F02"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W12",
              "reason": "The lambda service creates undetermined eni by design"
            }
          ]
        }
      }
    },
    "ApiGatewayOriginRequestPolicy339DF282": {
      "Type": "AWS::CloudFront::OriginRequestPolicy",
      "Properties": {
        "OriginRequestPolicyConfig": {
          "Comment": "Policy to forward all parameters in viewer requests except for the Host header",
          "CookiesConfig": {
            "CookieBehavior": "all"
          },
          "HeadersConfig": {
            "HeaderBehavior": "allExcept",
            "Headers": [
              "host"
            ]
          },
          "Name": {
            "Fn::Join": [
              "",
              [
                "ApiGatewayOriginRequestPolicy-",
                {
                  "Ref": "AWS::Region"
                },
                "-",
                {
                  "Fn::Select": [
                    0,
                    {
                      "Fn::Split": [
                        "-",
                        {
                          "Fn::Select": [
                            2,
                            {
                              "Fn::Split": [
                                "/",
                                {
                                  "Ref": "AWS::StackId"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            ]
          },
          "QueryStringsConfig": {
            "QueryStringBehavior": "all"
          }
        }
      }
    }
  },
  "Conditions": {
    "cloudfrontcontrolplanenotOpsInRegionFA8E79C7": {
      "Fn::Or": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-east-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "us-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-south-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-northeast-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ap-southeast-2"
              ]
            }
          ]
        },
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "ca-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-central-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-2"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-west-3"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "eu-north-1"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Ref": "AWS::Region"
                },
                "sa-east-1"
              ]
            }
          ]
        }
      ]
    }
  },
  "Parameters": {
    "Email": {
      "Type": "String",
      "AllowedPattern": "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$",
      "ConstraintDescription": "Email address must match pattern \\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*",
      "Description": "Email address of admin user "
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CognitoUnsupportedRegionRule": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Or": [
              {
                "Fn::Or": [
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "us-east-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "us-east-2"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "us-west-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "us-west-2"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ca-central-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "sa-east-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "eu-west-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "eu-west-2"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "eu-west-3"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "eu-central-1"
                    ]
                  }
                ]
              },
              {
                "Fn::Or": [
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ap-northeast-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ap-northeast-2"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ap-southeast-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ap-southeast-2"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "ap-south-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "eu-north-1"
                    ]
                  },
                  {
                    "Fn::Equals": [
                      {
                        "Ref": "AWS::Region"
                      },
                      "me-south-1"
                    ]
                  }
                ]
              }
            ]
          },
          "AssertDescription": "Cognito is not supported in current region. Please use correct CloudFormation template and try again."
        }
      ]
    },
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  },
  "Outputs": {
    "ClickStreamApiEndpoint5F7E3E22": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ClickStreamApi748490D9"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/",
            {
              "Ref": "ClickStreamApiDeploymentStageapi40499B1B"
            },
            "/"
          ]
        ]
      }
    },
    "ControlPlaneURL": {
      "Description": "The url of clickstream console",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "cloudfrontcontrolplanePortalDistributionCAE911E8",
                "DomainName"
              ]
            }
          ]
        ]
      }
    },
    "ControlPlaneBucket": {
      "Description": "Bucket to store solution console data and services logs",
      "Value": {
        "Ref": "ClickstreamSolutionDataBucket200465FE"
      }
    }
  },
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com"
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com"
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com"
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com"
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com"
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com"
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com"
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com"
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com"
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com"
      },
      "ap-southeast-4": {
        "states": "states.ap-southeast-4.amazonaws.com"
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com"
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com"
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com"
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com"
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com"
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com"
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com"
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com"
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com"
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com"
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com"
      },
      "il-central-1": {
        "states": "states.il-central-1.amazonaws.com"
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com"
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com"
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com"
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com"
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com"
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com"
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com"
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com"
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com"
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com"
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com"
      }
    }
  }
}